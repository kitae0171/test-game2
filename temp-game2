<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÌÅ¥ÎùºÏù¥Î∞ç Í≤åÏûÑ</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Press Start 2P', cursive;
            background-color: #f0f9ff;
            color: #333;
            overscroll-behavior: none;
        }
        .player-area {
            transition: transform 0.1s ease-out;
            width: calc(50% - 0.5rem);
        }
        .player-area.active-flash {
            transform: scale(1.03);
        }
        .key-display {
            background-color: #fff;
            border: 2px solid #ddd;
            box-shadow: inset 2px 2px 5px rgba(0,0,0,0.1);
        }
        .climb-container {
            border: 2px solid #ccc;
            background-image: linear-gradient(to bottom, #a1c4fd, #c2e9fb);
            position: relative; /* For absolute positioning of clouds and climber */
            overflow: hidden; /* Clouds should not spill out */
        }
        .climb-bar {
            transition: height 0.15s ease-out;
        }
        .climber-icon {
            transition: bottom 0.15s ease-out;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
            transform: translateX(-50%);
            position: absolute; /* Ensures z-index works correctly */
            z-index: 10;      /* Climber icon above clouds */
        }
        .button-3d {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 8px;
            box-shadow: 0 4px #999;
            transition: all 0.1s ease-in-out;
        }
        .button-3d:hover {
            background-color: #45a049;
        }
        .button-3d:active {
            background-color: #3e8e41;
            box-shadow: 0 2px #666;
            transform: translateY(2px);
        }

        @keyframes climb-animation {
            0% { transform: translateY(0) translateX(-50%) scale(1); }
            50% { transform: translateY(-12px) translateX(-50%) scale(1.15); }
            100% { transform: translateY(0) translateX(-50%) scale(1); }
        }
        .climbing {
            animation: climb-animation 0.3s ease-out;
        }

        .cloud-item {
            position: absolute;
            /* background-color, border-radius, box-shadow removed for emoji clouds */
            transition: top 0.8s linear; /* Smooth downward movement */
            pointer-events: none; /* Clouds should not interfere with interactions */
            z-index: 1; /* Clouds behind climber icon */
            /* Emoji-specific styling will be handled by font-size and text content */
            line-height: 1; /* Adjust if emoji vertical alignment is off */
        }

        @media (max-width: 768px) {
            .flex-container-players {
                align-items: stretch;
            }
            .player-area {
                margin-bottom: 10px;
                padding: 0.75rem; /* p-3 */
            }
            h1 {
                font-size: 1.875rem; /* text-3xl */
                margin-bottom: 1rem; /* mb-4 */
            }
            .player-area h2 {
                font-size: 1.125rem; /* text-lg */
                margin-bottom: 0.5rem; /* mb-2 */
            }
            .key-display {
                font-size: 2rem;
                height: 3rem;
                margin-top: 0.5rem; margin-bottom: 0.5rem;
            }
            .score-display {
                font-size: 0.75rem; /* text-xs */
                margin-bottom: 0.5rem; /* mb-2 */
            }
            .climb-container {
                height: 10rem; /* h-40 */
            }
            .climber-icon {
                font-size: 1.5rem; /* text-2xl */
            }
            #message-area {
                font-size: 1.25rem; /* text-xl */
                margin-top: 1rem; margin-bottom: 1rem;
                height: 2rem; /* h-8 */
            }
            .button-3d {
                padding: 8px 16px;
                font-size: 12px;
            }
        }
         @media (max-width: 480px) {
            .player-area {
                width: calc(50% - 0.25rem);
            }
             h1 {
                font-size: 1.5rem; /* text-2xl */
            }
            .player-area h2 {
                font-size: 1rem; /* text-base */
            }
            .key-display {
                font-size: 1.5rem; /* text-xl */
                height: 2.5rem;
            }
            .climber-icon {
                font-size: 1.25rem; /* text-xl */
            }
        }
    </style>
</head>
<body class="select-none">
    <div class="container mx-auto p-2 md:p-4 text-center">
        <h1 class="text-3xl md:text-4xl mb-4 md:mb-8 text-indigo-700">ÌÅ¥ÎùºÏù¥Î∞ç Î†àÏù¥Ïä§!</h1>

        <div class="flex flex-container-players justify-between gap-2 md:gap-4 mb-4 md:mb-8">
            <div id="player1-area" class="player-area border-4 border-blue-500 p-3 md:p-6 rounded-lg shadow-xl bg-blue-50">
                <h2 class="text-lg md:text-2xl mb-2 md:mb-4 text-blue-700">ÌîåÎ†àÏù¥Ïñ¥ 1</h2>
                <div class="key-display text-2xl md:text-5xl font-bold my-2 md:my-6 h-12 md:h-20 flex items-center justify-center rounded-md" id="key-p1">Q</div>
                <div class="score-display text-xs md:text-base mb-2 md:mb-4">Ï†êÏàò: <span id="score-p1" class="font-bold">0</span> / 100</div>
                <div class="climb-container w-full h-40 md:h-64 rounded-md shadow-inner">
                    <div id="climb-bar-p1" class="climb-bar bg-blue-600 w-full absolute bottom-0" style="height: 0%; z-index: 5;"></div>
                    <div id="climber-icon-p1" class="climber-icon text-2xl md:text-3xl absolute left-1/2" style="bottom: 0px;">üßó‚Äç‚ôÇÔ∏è</div>
                    </div>
            </div>

            <div id="player2-area" class="player-area border-4 border-red-500 p-3 md:p-6 rounded-lg shadow-xl bg-red-50">
                <h2 class="text-lg md:text-2xl mb-2 md:mb-4 text-red-700">ÌîåÎ†àÏù¥Ïñ¥ 2</h2>
                <div class="key-display text-2xl md:text-5xl font-bold my-2 md:my-6 h-12 md:h-20 flex items-center justify-center rounded-md" id="key-p2">U</div>
                <div class="score-display text-xs md:text-base mb-2 md:mb-4">Ï†êÏàò: <span id="score-p2" class="font-bold">0</span> / 100</div>
                <div class="climb-container w-full h-40 md:h-64 rounded-md shadow-inner">
                    <div id="climb-bar-p2" class="climb-bar bg-red-600 w-full absolute bottom-0" style="height: 0%; z-index: 5;"></div>
                    <div id="climber-icon-p2" class="climber-icon text-2xl md:text-3xl absolute left-1/2" style="bottom: 0px;">üßó‚Äç‚ôÄÔ∏è</div>
                    </div>
            </div>
        </div>

        <div id="message-area" class="text-xl md:text-3xl font-bold my-4 md:my-8 h-8 md:h-10 text-green-600"></div>
        <button id="reset-button" class="button-3d text-base md:text-xl">Í≤åÏûÑ Î¶¨ÏÖã</button>
    </div>

    <script>
        const keyP1Elem = document.getElementById('key-p1');
        const scoreP1Elem = document.getElementById('score-p1');
        const climbBarP1Elem = document.getElementById('climb-bar-p1');
        const climberIconP1Elem = document.getElementById('climber-icon-p1');
        const player1AreaElem = document.getElementById('player1-area');

        const keyP2Elem = document.getElementById('key-p2');
        const scoreP2Elem = document.getElementById('score-p2');
        const climbBarP2Elem = document.getElementById('climb-bar-p2');
        const climberIconP2Elem = document.getElementById('climber-icon-p2');
        const player2AreaElem = document.getElementById('player2-area');

        const messageAreaElem = document.getElementById('message-area');
        const resetButtonElem = document.getElementById('reset-button');

        const player1Keys = ['q', 'w', 'e', 'r'];
        const player2Keys = ['u', 'i', 'o', 'p'];
        const targetScore = 100;

        let scoreP1 = 0;
        let scoreP2 = 0;
        let currentKeyP1 = '';
        let currentKeyP2 = '';
        let gameOver = false;

        // Cloud configuration
        const CLOUD_STEP_DOWN_PERCENT = 7; // Move clouds down by 7% of container height
        const MAX_CLOUDS = 4; // Max clouds per player
        const INITIAL_CLOUDS = 2; // Number of clouds to add at game start
        const cloudEmojis = ['‚òÅÔ∏è', 'üå•Ô∏è']; // Available cloud emojis

        let player1Clouds = [];
        let player2Clouds = [];

        function getRandomKey(keysArray) {
            return keysArray[Math.floor(Math.random() * keysArray.length)];
        }

        function updateKeyDisplay() {
            keyP1Elem.textContent = currentKeyP1.toUpperCase();
            keyP2Elem.textContent = currentKeyP2.toUpperCase();
        }

        function updateScoreDisplay() {
            scoreP1Elem.textContent = scoreP1;
            scoreP2Elem.textContent = scoreP2;

            const climbContainerP1 = climberIconP1Elem.parentElement;
            const climbContainerP2 = climberIconP2Elem.parentElement;
            
            const iconHeightP1 = climberIconP1Elem.clientHeight;
            const iconHeightP2 = climberIconP2Elem.clientHeight;

            climbBarP1Elem.style.height = `${(scoreP1 / targetScore) * 100}%`;
            climbBarP2Elem.style.height = `${(scoreP2 / targetScore) * 100}%`;
            
            let p1BottomPercent = (scoreP1 / targetScore) * 100;
            let p2BottomPercent = (scoreP2 / targetScore) * 100;

            // Ensure climber icon doesn't go above the bar due to its own height
            const maxBottomP1 = Math.max(0, 100 - (iconHeightP1 / climbContainerP1.clientHeight * 100));
            const maxBottomP2 = Math.max(0, 100 - (iconHeightP2 / climbContainerP2.clientHeight * 100));
            
            climberIconP1Elem.style.bottom = `${Math.min(p1BottomPercent, maxBottomP1)}%`;
            climberIconP2Elem.style.bottom = `${Math.min(p2BottomPercent, maxBottomP2)}%`;
        }
        
        function flashPlayerArea(playerAreaElem) {
            playerAreaElem.classList.add('active-flash');
            setTimeout(() => {
                playerAreaElem.classList.remove('active-flash');
            }, 150);
        }

        function animateClimber(climberIconElem) {
            climberIconElem.classList.remove('climbing');
            void climberIconElem.offsetWidth; 
            climberIconElem.classList.add('climbing');
            setTimeout(() => {
                climberIconElem.classList.remove('climbing');
            }, 300);
        }

        // --- Cloud Functions ---
        function createCloudElement() { // containerWidth parameter is no longer needed for emoji sizing
            const cloud = document.createElement('div'); // Using div is fine, or span
            cloud.classList.add('cloud-item');
            
            // Set emoji content
            cloud.textContent = cloudEmojis[Math.floor(Math.random() * cloudEmojis.length)];
            
            // Set size using font-size
            const baseFontSize = Math.random() * 20 + 25; // Emoji font size (e.g., 25px to 45px)
                                                        // For smaller screens, this might be large.
                                                        // Consider media queries or smaller base values if needed.
            cloud.style.fontSize = `${baseFontSize}px`;
            
            cloud.style.left = `${Math.random() * 80 + 5}%`; // Horizontal position: 5% to 85%
            // Initial vertical position (above container)
            // Use a value based on font size to ensure it's off-screen
            cloud.style.top = `-${baseFontSize * 1.2}px`; // Adjust multiplier if needed
            cloud.style.opacity = (Math.random() * 0.3 + 0.7).toFixed(2); // Opacity: 0.7 to 1.0

            return cloud;
        }

        function manageClouds(playerIndex) {
            const playerArea = playerIndex === 1 ? player1AreaElem : player2AreaElem;
            const climbContainer = playerArea.querySelector('.climb-container');
            const cloudsArray = playerIndex === 1 ? player1Clouds : player2Clouds;
            const containerHeight = climbContainer.clientHeight;
            const stepDownAmount = containerHeight * (CLOUD_STEP_DOWN_PERCENT / 100);

            // 1. Move existing clouds down
            for (let i = cloudsArray.length - 1; i >= 0; i--) {
                const cloud = cloudsArray[i];
                const currentTop = parseFloat(cloud.style.top); // This is in px
                const newTop = currentTop + stepDownAmount;

                if (newTop > containerHeight) {
                    cloud.remove(); 
                    cloudsArray.splice(i, 1); 
                } else {
                    cloud.style.top = `${newTop}px`;
                }
            }

            // 2. Add a new cloud at the top if not exceeding max clouds
            if (cloudsArray.length < MAX_CLOUDS) {
                const newCloud = createCloudElement(); // No need to pass containerWidth
                climbContainer.appendChild(newCloud);
                cloudsArray.push(newCloud);

                requestAnimationFrame(() => {
                    newCloud.style.top = `${Math.random() * 8 + 2}%`; 
                });
            }
        }
        
        function addInitialClouds() {
            const climbContainerP1 = player1AreaElem.querySelector('.climb-container');
            const climbContainerP2 = player2AreaElem.querySelector('.climb-container');

            for (let i = 0; i < INITIAL_CLOUDS; i++) {
                const initialCloudP1 = createCloudElement();
                initialCloudP1.style.top = `${Math.random() * 60 + 10}%`; // Random Y: 10% to 70%
                initialCloudP1.style.left = `${Math.random() * 80 + 5}%`;
                climbContainerP1.appendChild(initialCloudP1);
                player1Clouds.push(initialCloudP1);

                const initialCloudP2 = createCloudElement();
                initialCloudP2.style.top = `${Math.random() * 60 + 10}%`;
                initialCloudP2.style.left = `${Math.random() * 80 + 5}%`;
                climbContainerP2.appendChild(initialCloudP2);
                player2Clouds.push(initialCloudP2);
            }
        }


        function startGame() {
            scoreP1 = 0;
            scoreP2 = 0;
            gameOver = false;
            
            currentKeyP1 = getRandomKey(player1Keys);
            currentKeyP2 = getRandomKey(player2Keys);
            
            updateKeyDisplay();
            updateScoreDisplay();
            
            [...player1Clouds, ...player2Clouds].forEach(cloud => {
                if (cloud && cloud.parentNode) { 
                    cloud.remove();
                }
            });
            player1Clouds = [];
            player2Clouds = [];
            addInitialClouds(); 

            messageAreaElem.textContent = 'ÏãúÏûë!';
            setTimeout(() => {
                if (!gameOver) messageAreaElem.textContent = '';
            }, 1500);
            resetButtonElem.disabled = false;
        }

        document.addEventListener('keydown', (event) => {
            if (gameOver) return;
            const pressedKey = event.key.toLowerCase();

            if (player1Keys.includes(pressedKey)) {
                if (pressedKey === currentKeyP1) {
                    scoreP1++;
                    flashPlayerArea(player1AreaElem);
                    animateClimber(climberIconP1Elem);
                    manageClouds(1); 
                    if (scoreP1 >= targetScore) {
                        scoreP1 = targetScore;
                        updateScoreDisplay();
                        messageAreaElem.textContent = 'ÌîåÎ†àÏù¥Ïñ¥ 1 ÏäπÎ¶¨!';
                        gameOver = true;
                        resetButtonElem.disabled = false;
                        return;
                    }
                    currentKeyP1 = getRandomKey(player1Keys);
                }
            } else if (player2Keys.includes(pressedKey)) {
                if (pressedKey === currentKeyP2) {
                    scoreP2++;
                    flashPlayerArea(player2AreaElem);
                    animateClimber(climberIconP2Elem);
                    manageClouds(2); 
                    if (scoreP2 >= targetScore) {
                        scoreP2 = targetScore;
                        updateScoreDisplay();
                        messageAreaElem.textContent = 'ÌîåÎ†àÏù¥Ïñ¥ 2 ÏäπÎ¶¨!';
                        gameOver = true;
                        resetButtonElem.disabled = false;
                        return;
                    }
                    currentKeyP2 = getRandomKey(player2Keys);
                }
            }
            
            updateKeyDisplay();
            updateScoreDisplay();
        });

        resetButtonElem.addEventListener('click', startGame);
        window.addEventListener('resize', () => {
            updateScoreDisplay();
            // Note: Emoji clouds might not resize with container unless font-size is viewport-relative
            // or explicitly recalculated on resize. For now, they maintain their pixel font-size.
        });

        startGame();
    </script>
</body>
</html>
